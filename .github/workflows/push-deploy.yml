name: Deploy Infrastructure
run-name: Deploy Infrastructure

on:
  workflow_dispatch:
    inputs:
      terraform-destroy:
        description: 'Destroy the infrastructure'
        default: false
        type: boolean
      terraform-version:
        type: choice
        description: Terraform version to use
        options:
        - 1.9.2
        - 1.8.5
      environment:
        description: Environment to deploy to
        type: environment
      terraform-log-level:
        description: Terraform log level
        type: choice
        default: WARN
        options:
        - TRACE
        - DEBUG
        - INFO
        - WARN
        - ERROR

permissions:
  id-token: write # Required for the Workflow to request an OIDC JWT ID token from Azure EntraID
  contents: read # This is required for actions/checkout

env:
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_USE_OIDC: "true"

jobs:
  plan-infrastructure:
    name: Plan Infrastructure
    runs-on: ubuntu-latest
    # environment: ${{ inputs.environment }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Terraform v${{ inputs.terraform-version }}
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ inputs.terraform-version }}

    - name: Azure Login via OIDC
      id: azure_login
      uses: azure/login@v2
      with:
        client-id: ${{ env.ARM_CLIENT_ID }}
        tenant-id: ${{ env.ARM_TENANT_ID }}
        subscription-id: ${{ env.ARM_SUBSCRIPTION_ID }}

    - name: Initializing Terraform
      working-directory: ./examples
      run: |
        terraform init -input=false
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        TF_LOG: ${{ inputs.terraform-log-level }}

    - name: Generate Terraform Plan
      if: ${{ inputs.terraform-destroy == false }}
      working-directory: ./examples
      run: |
        terraform plan -input=false -out=terraform-$(date +"%Y%m%d%H%M%S").tfplan
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        TF_LOG: ${{ inputs.terraform-log-level }}
    
    - name: Generate Terraform Destroy Plan
      if: ${{ inputs.terraform-destroy == true }}
      working-directory: ./examples
      run: |
        terraform plan -input=false -destroy -out=terraform-destroy-$(date +"%Y%m%d%H%M%S").tfplan
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        TF_LOG: ${{ inputs.terraform-log-level }}
    
    - uses: actions/upload-artifact@v4
      with:
        name: terraform-plan
        path: ./examples/*.tfplan
        if-no-files-found: 'warn'
        retention-days: 1
        compression-level: 0
        overwrite: false

  deploy-to-dev:
    name: Deploy to DEV
    runs-on: ubuntu-latest
    needs: plan-infrastructure
    environment: Dev
    steps:
    - name: Pre-Script
      run: |
        pwd
        ls -la
    
    - uses: actions/download-artifact@v4
      with:
        name: terraform-plan
        path: examples    
    
    - name: Post-Script
      run: |
        pwd
        ls -la

    - name: Terraform Apply
      working-directory: ./examples
      run: |
        echo 'Placeholder for terraform apply command'
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        TF_LOG: ${{ inputs.terraform-log-level }}

  deploy-to-test:
    name: Deploy to TEST
    runs-on: ubuntu-latest
    needs: deploy-to-dev
    environment: Test
    steps:
    - name: Pre-Script
      run: |
        ls -la
    
    - uses: actions/download-artifact@v4
      with:
        name: terraform-plan
        path: ./examples    
    
    - name: Post-Script
      run: |
        ls -la

    - name: Terraform Apply
      working-directory: ./examples
      run: |
        echo 'Placeholder for terraform apply command'
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        TF_LOG: ${{ inputs.terraform-log-level }}
